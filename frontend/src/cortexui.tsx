import React, { useMemo, useState } from "react"; import { motion, AnimatePresence } from "framer-motion"; import { PieChart, Pie, Cell, ResponsiveContainer, LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, BarChart, Bar } from "recharts"; import { Home, Calendar, Settings, ListTodo, Search, Plus, PlayCircle, FileCode, Store, Wrench, Brain, Activity, Menu, ChevronLeft, ChevronRight, Bell, Moon, Sun, CheckCircle2, Github, Trash2, Info, SquarePen, PauseCircle, Wand2 } from "lucide-react"; import { Button } from "@/components/ui/button"; import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"; import { Input } from "@/components/ui/input"; import { Textarea } from "@/components/ui/textarea"; import { Switch } from "@/components/ui/switch"; import { Label } from "@/components/ui/label"; import { Badge } from "@/components/ui/badge"; import { Checkbox } from "@/components/ui/checkbox"; import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"; import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"; import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"; import { TooltipProvider, Tooltip as ShadTooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";

// ------------------------------------------------------------- // Cortex UI — Single-file React app shell (previewable in Canvas) // ------------------------------------------------------------- // Design goals: // - Cross-platform layout that adapts beautifully to desktop & mobile // - Clean, modern aesthetic using Tailwind + shadcn/ui // - Built-in spaces for: Dashboard, Tasks, Schedule, Builder, Plugins, Self-Heal // - Butler Notes drawer, Command Palette, and Settings // - Framer Motion micro-interactions // - Mock data + stateful interactions; easy to wire up to your backend // -------------------------------------------------------------

// Mock data const progressSeries = [ { day: "Mon", done: 4, created: 7 }, { day: "Tue", done: 7, created: 8 }, { day: "Wed", done: 6, created: 6 }, { day: "Thu", done: 9, created: 10 }, { day: "Fri", done: 12, created: 11 }, { day: "Sat", done: 5, created: 7 }, { day: "Sun", done: 8, created: 8 }, ];

const usage = [ { name: "Builder", value: 38 }, { name: "Scheduler", value: 22 }, { name: "Self-Heal", value: 16 }, { name: "Plugins", value: 14 }, { name: "Butler", value: 10 }, ];

const kanbanSeed = { backlog: [ { id: "t1", title: "Strict JSON schema for Router→REPL", tag: "Contracts" }, { id: "t2", title: "Registry import hardening", tag: "Refactor" }, ], doing: [ { id: "t3", title: "Global self-healing supervisor loop", tag: "Self-Heal" }, ], review: [ { id: "t4", title: "Butler notes: scoped reminders", tag: "Butler" }, ], done: [ { id: "t5", title: "Plugin scaffolder E2E tests", tag: "Testing" }, ], };

type KanbanKey = keyof typeof kanbanSeed;

const useDarkMode = () => { const [dark, setDark] = useState(true); React.useEffect(() => { const root = document.documentElement; if (dark) root.classList.add("dark"); else root.classList.remove("dark"); }, [dark]); return { dark, setDark } as const; };

const SidebarLink: React.FC<{ icon: React.ReactNode; label: string; active?: boolean; onClick?: () => void }> = ({ icon, label, active, onClick }) => ( <button onClick={onClick} className={flex items-center gap-3 px-3 py-2 rounded-xl transition-all w-full text-left hover:bg-muted ${active ? "bg-muted" : ""}}

> 

<span className="size-5">{icon}</span>
<span className="font-medium">{label}</span>

  </button>
);const ToolbarIcon: React.FC<{ icon: React.ReactNode; label: string; onClick?: () => void }>= ({ icon, label, onClick }) => ( <ShadTooltip> <TooltipTrigger asChild> <button onClick={onClick} className="p-2 rounded-xl hover:bg-muted transition-colors"> {icon} </button> </TooltipTrigger> <TooltipContent>{label}</TooltipContent> </ShadTooltip> );

const SectionHeader: React.FC<{ title: string; icon?: React.ReactNode; right?: React.ReactNode }> = ({ title, icon, right }) => (

  <div className="flex items-center justify-between">
    <div className="flex items-center gap-2">
      {icon}
      <h3 className="text-lg font-semibold">{title}</h3>
    </div>
    {right}
  </div>
);const EmptyState: React.FC<{ icon: React.ReactNode; title: string; subtitle: string; cta?: React.ReactNode }> = ({ icon, title, subtitle, cta }) => (

  <div className="flex flex-col items-center justify-center text-center p-10 border rounded-2xl bg-card">
    <div className="mb-2">{icon}</div>
    <h4 className="text-base font-semibold">{title}</h4>
    <p className="text-sm text-muted-foreground mb-4">{subtitle}</p>
    {cta}
  </div>
);function useKanban() { const [columns, setColumns] = useState(kanbanSeed); function addTask(title: string, tag = "General") { const id = Math.random().toString(36).slice(2); setColumns((prev) => ({ ...prev, backlog: [...prev.backlog, { id, title, tag }] })); } function move(id: string, from: KanbanKey, to: KanbanKey) { setColumns((prev) => { const src = [...prev[from]]; const idx = src.findIndex((t) => t.id === id); if (idx === -1) return prev; const [task] = src.splice(idx, 1); return { ...prev, [from]: src, [to]: [...prev[to], task] }; }); } function remove(id: string) { setColumns((prev) => { const next: any = {}; (Object.keys(prev) as KanbanKey[]).forEach((k) => { next[k] = prev[k].filter((t) => t.id !== id); }); return next; }); } return { columns, addTask, move, remove } as const; }

const MiniStat: React.FC<{ title: string; value: string | number; icon: React.ReactNode; hint?: string }> = ({ title, value, icon, hint }) => ( <Card className="shadow-sm"> <CardContent className="p-4 flex items-center gap-4"> <div className="p-3 rounded-2xl bg-muted">{icon}</div> <div> <div className="text-sm text-muted-foreground">{title}</div> <div className="text-2xl font-bold leading-tight">{value}</div> {hint && <div className="text-xs text-muted-foreground mt-1">{hint}</div>} </div> </CardContent> </Card> );

const BottomTabBar: React.FC<{ active: string; setActive: (k: string) => void }> = ({ active, setActive }) => (

  <div className="fixed bottom-0 inset-x-0 z-40 border-t bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60 lg:hidden">
    <div className="grid grid-cols-5">
      {[
        { k: "dashboard", icon: <Home className="size-5" />, label: "Home" },
        { k: "tasks", icon: <ListTodo className="size-5" />, label: "Tasks" },
        { k: "schedule", icon: <Calendar className="size-5" />, label: "Schedule" },
        { k: "builder", icon: <FileCode className="size-5" />, label: "Builder" },
        { k: "plugins", icon: <Store className="size-5" />, label: "Plugins" },
      ].map((t) => (
        <button key={t.k} onClick={() => setActive(t.k)} className={`py-3 flex flex-col items-center gap-1 ${active === t.k ? "text-foreground" : "text-muted-foreground"}`}>
          {t.icon}
          <span className="text-[11px]">{t.label}</span>
        </button>
      ))}
    </div>
  </div>
);const ChartCard: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => ( <Card className="shadow-sm"> <CardHeader className="pb-2"> <CardTitle className="text-sm font-semibold text-muted-foreground">{title}</CardTitle> </CardHeader> <CardContent className="h-48">{children}</CardContent> </Card> );

const CommandPalette: React.FC<{ open: boolean; setOpen: (b: boolean) => void; onRun: (cmd: string) => void }> = ({ open, setOpen, onRun }) => { const [query, setQuery] = useState(""); const commands = [ { key: "self-heal", label: "Run full self-healing cycle" }, { key: "new-task", label: "Add task to Backlog" }, { key: "butler", label: "Show Butler notes" }, { key: "plugins", label: "Open Plugin Store" }, ].filter(c => c.label.toLowerCase().includes(query.toLowerCase())); return ( <AnimatePresence> {open && ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 z-50 grid place-items-center bg-black/20 p-4"> <motion.div initial={{ scale: 0.96, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0.98, opacity: 0 }} className="w-full max-w-xl rounded-2xl border bg-background"> <div className="p-4 border-b flex items-center gap-2"> <Search className="size-4 text-muted-foreground" /> <Input placeholder="Type a command…" value={query} onChange={(e) => setQuery(e.target.value)} className="border-0 shadow-none focus-visible:ring-0" /> </div> <div className="p-2 max-h-80 overflow-y-auto"> {commands.length === 0 ? ( <div className="p-3 text-sm text-muted-foreground">No matches</div> ) : ( commands.map(c => ( <button key={c.key} onClick={() => { onRun(c.key); setOpen(false); }} className="w-full text-left px-3 py-2 rounded-lg hover:bg-muted"> {c.label} </button> )) )} </div> </motion.div> </motion.div> )} </AnimatePresence> ); };

const ButlerNotes: React.FC<{ open: boolean; setOpen: (b: boolean) => void }> = ({ open, setOpen }) => { const [notes, setNotes] = useState<Array<{ id: string; text: string; scope: string }>>([ { id: "n1", text: "Audit private attrs in REPL; replace with public APIs", scope: "executor" }, { id: "n2", text: "Add stricter task schema for Router→REPL", scope: "contracts" }, ]); const [txt, setTxt] = useState(""); const [scope, setScope] = useState("general");

return ( <Sheet open={open} onOpenChange={setOpen}> <SheetContent side="right" className="w-[520px] max-w-[90vw]"> <SheetHeader> <SheetTitle className="flex items-center gap-2"><Brain className="size-5" /> Butler Notes</SheetTitle> </SheetHeader> <div className="space-y-4 mt-4"> <div className="flex gap-2"> <Input placeholder="Write a note…" value={txt} onChange={(e) => setTxt(e.target.value)} /> <Input placeholder="scope (e.g. executor)" value={scope} onChange={(e) => setScope(e.target.value)} className="w-40" /> <Button onClick={() => { if (!txt.trim()) return; setNotes((n) => [...n, { id: Math.random().toString(36).slice(2), text: txt.trim(), scope: scope.trim() || "general" }]); setTxt(""); }}><Plus className="size-4 mr-1" />Add</Button> </div> <div className="space-y-2"> {notes.map(n => ( <Card key={n.id} className="shadow-sm"> <CardContent className="p-4 flex items-start gap-3"> <Badge variant="secondary">{n.scope}</Badge> <p className="text-sm flex-1">{n.text}</p> <Button size="icon" variant="ghost" onClick={() => setNotes((all) => all.filter(x => x.id !== n.id))}><Trash2 className="size-4" /></Button> </CardContent> </Card> ))} {notes.length === 0 && ( <EmptyState icon={<Info className="size-6 text-muted-foreground" />} title="No notes yet" subtitle="Capture ideas, todos, and reminders. Use scopes to tie them to modules." /> )} </div> </div> </SheetContent> </Sheet> ); };

const PluginStore: React.FC = () => { const [open, setOpen] = useState(false); const plugins = [ { id: "p1", name: "GitOps", desc: "Automate repo hygiene & PRs", tag: "DevOps" }, { id: "p2", name: "EHR Billing", desc: "Submit and follow insurance claims", tag: "EHR" }, { id: "p3", name: "Content Pilot", desc: "Plan & schedule marketing content", tag: "Marketing" }, ]; return ( <Dialog open={open} onOpenChange={setOpen}> <DialogTrigger asChild> <Button variant="secondary" className="gap-2"><Store className="size-4" /> Open Plugin Store</Button> </DialogTrigger> <DialogContent className="sm:max-w-2xl"> <DialogHeader> <DialogTitle>Plugin Store</DialogTitle> </DialogHeader> <div className="grid sm:grid-cols-2 gap-3"> {plugins.map(p => ( <Card key={p.id} className="hover:shadow-md transition-shadow"> <CardHeader className="pb-2"> <CardTitle className="text-base flex items-center justify-between"> <span>{p.name}</span> <Badge variant="outline">{p.tag}</Badge> </CardTitle> </CardHeader> <CardContent className="text-sm text-muted-foreground"> <p>{p.desc}</p> <div className="mt-3 flex gap-2"> <Button size="sm" className="gap-1"><Plus className="size-4" />Install</Button> <Button size="sm" variant="outline">Details</Button> </div> </CardContent> </Card> ))} </div> </DialogContent> </Dialog> ); };

const SettingsPanel: React.FC<{ open: boolean; setOpen: (b: boolean) => void; dark: boolean; setDark: (b: boolean) => void }> = ({ open, setOpen, dark, setDark }) => ( <Sheet open={open} onOpenChange={setOpen}> <SheetContent side="left" className="w-[420px] max-w-[90vw]"> <SheetHeader> <SheetTitle className="flex items-center gap-2"><Settings className="size-5" /> Settings</SheetTitle> </SheetHeader> <div className="mt-4 space-y-6"> <div> <h4 className="font-medium mb-2">Appearance</h4> <div className="flex items-center justify-between p-3 rounded-xl border"> <div> <div className="text-sm font-medium">Dark mode</div> <div className="text-xs text-muted-foreground">Switch between light and dark themes</div> </div> <div className="flex items-center gap-2"> <Moon className="size-4" /> <Switch checked={dark} onCheckedChange={setDark} /> <Sun className="size-4" /> </div> </div> </div> <div> <h4 className="font-medium mb-2">Experiment Flags</h4> <div className="space-y-2"> {["Global Self-Heal", "Butler Inline Prompts", "Auto-Scaffold Plugins"].map(f => ( <label key={f} className="flex items-center justify-between p-3 rounded-xl border"> <span className="text-sm">{f}</span> <Checkbox defaultChecked className="rounded-md" /> </label> ))} </div> </div> <div> <h4 className="font-medium mb-2">Integrations</h4> <div className="grid grid-cols-2 gap-3"> <Card> <CardContent className="p-4"> <Github className="size-5 mb-2" /> <div className="text-sm font-medium">GitHub</div> <p className="text-xs text-muted-foreground">Repo automations and PRs</p> <Button variant="secondary" size="sm" className="mt-3">Connect</Button> </CardContent> </Card> <Card> <CardContent className="p-4"> <Calendar className="size-5 mb-2" /> <div className="text-sm font-medium">Calendar</div> <p className="text-xs text-muted-foreground">Sync tasks & events</p> <Button variant="secondary" size="sm" className="mt-3">Connect</Button> </CardContent> </Card> </div> </div> </div> </SheetContent> </Sheet> );

const Dashboard: React.FC = () => { const pieColors = useMemo(() => ["#6366F1", "#10B981", "#F59E0B", "#EF4444", "#8B5CF6"], []); return ( <div className="grid xl:grid-cols-3 gap-4"> <div className="xl:col-span-2 space-y-4"> <div className="grid sm:grid-cols-3 gap-3"> <MiniStat title="Tasks Done" value={128} icon={<CheckCircle2 className="size-5" />} hint="Last 7 days" /> <MiniStat title="Active Modules" value={12} icon={<Activity className="size-5" />} hint="Across repo" /> <MiniStat title="Incidents" value={1} icon={<Wrench className="size-5" />} hint="Self-heal pending" /> </div> <div className="grid md:grid-cols-2 gap-4"> <ChartCard title="Weekly Flow (created vs done)"> <ResponsiveContainer width="100%" height="100%"> <LineChart data={progressSeries}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="day" /> <YAxis /> <Tooltip /> <Line type="monotone" dataKey="created" /> <Line type="monotone" dataKey="done" /> </LineChart> </ResponsiveContainer> </ChartCard> <ChartCard title="Time Allocation by System"> <ResponsiveContainer width="100%" height="100%"> <PieChart> <Pie data={usage} dataKey="value" nameKey="name" innerRadius={48} outerRadius={72} paddingAngle={2}> {usage.map((entry, index) => ( <Cell key={cell-${index}} /> ))} </Pie> <Tooltip /> </PieChart> </ResponsiveContainer> </ChartCard> </div> <Card className="shadow-sm"> <CardHeader className="pb-2"> <CardTitle className="text-sm text-muted-foreground">Build & Self-Heal Timeline</CardTitle> </CardHeader> <CardContent> <ResponsiveContainer width="100%" height={220}> <BarChart data={progressSeries}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="day" /> <YAxis /> <Tooltip /> <Bar dataKey="done" /> </BarChart> </ResponsiveContainer> </CardContent> </Card> </div> <div className="space-y-4"> <Card className="shadow-sm"> <CardHeader className="pb-2"> <CardTitle className="text-sm text-muted-foreground">Quick Actions</CardTitle> </CardHeader> <CardContent className="grid grid-cols-2 gap-2"> <Button className="gap-2" variant="secondary"><PlayCircle className="size-4" /> Run Self-Heal</Button> <Button className="gap-2" variant="secondary"><FileCode className="size-4" /> New Plugin</Button> <Button className="gap-2" variant="secondary"><SquarePen className="size-4" /> New Task</Button> <Button className="gap-2" variant="secondary"><Wrench className="size-4" /> Diagnostics</Button> </CardContent> </Card> <Card className="shadow-sm"> <CardHeader className="pb-2"> <CardTitle className="text-sm text-muted-foreground">Build Status</CardTitle> </CardHeader> <CardContent className="space-y-3"> <div className="flex items-center justify-between text-sm"> <span>pytest</span> <Badge variant="outline">GREEN · 30/30</Badge> </div> <div className="flex items-center justify-between text-sm"> <span>Self-Heal</span> <Badge variant="secondary">Pending</Badge> </div> <div className="flex items-center justify-between text-sm"> <span>Release</span> <Badge>v0.2.1</Badge> </div> </CardContent> </Card> <Card className="shadow-sm"> <CardHeader className="pb-2"> <CardTitle className="text-sm text-muted-foreground">Upcoming</CardTitle> </CardHeader> <CardContent className="space-y-3 text-sm"> <div className="flex items-center justify-between"><span>Sprint Review</span><span className="text-muted-foreground">Today 3:00p</span></div> <div className="flex items-center justify-between"><span>Billing Integrations</span><span className="text-muted-foreground">Tue 10:00a</span></div> <div className="flex items-center justify-between"><span>Marketing Sync</span><span className="text-muted-foreground">Wed 1:30p</span></div> </CardContent> </Card> </div> </div> ); };

const TasksBoard: React.FC = () => { const { columns, addTask, move, remove } = useKanban(); const [newTask, setNewTask] = useState("");

const Column: React.FC<{ k: KanbanKey; title: string }>= ({ k, title }) => ( <div className="space-y-3"> <SectionHeader title={title} right={<Badge variant="outline">{columns[k].length}</Badge>} /> <div className="grid gap-2"> {columns[k].map(t => ( <motion.div layout key={t.id} className="p-3 rounded-xl border bg-card"> <div className="flex items-start justify-between gap-2"> <div> <div className="text-sm font-medium">{t.title}</div> <Badge variant="secondary" className="mt-1">{t.tag}</Badge> </div> <div className="flex items-center gap-1"> {(["backlog","doing","review","done"] as KanbanKey[]).map(stage => stage !== k && ( <Button key={stage} size="icon" variant="ghost" onClick={() => move(t.id, k, stage)} title={Move to ${stage}}> <ChevronRight className="size-4" /> </Button> ))} <Button size="icon" variant="ghost" onClick={() => remove(t.id)}> <Trash2 className="size-4" /> </Button> </div> </div> </motion.div> ))} {columns[k].length === 0 && ( <EmptyState icon={<ListTodo className="size-6 text-muted-foreground" />} title="Nothing here" subtitle="Add tasks or move them from other columns." /> )} </div> </div> );

return ( <div className="space-y-4"> <div className="flex items-center gap-2"> <Input placeholder="Quick add task…" value={newTask} onChange={(e) => setNewTask(e.target.value)} /> <Button onClick={() => { if (newTask.trim()) { addTask(newTask.trim()); setNewTask(""); } }} className="gap-2"><Plus className="size-4" />Add</Button> </div> <div className="grid md:grid-cols-2 xl:grid-cols-4 gap-4"> <Column k="backlog" title="Backlog" /> <Column k="doing" title="Doing" /> <Column k="review" title="Review" /> <Column k="done" title="Done" /> </div> </div> ); };

const ScheduleView: React.FC = () => (

  <div className="grid md:grid-cols-2 gap-4">
    <Card className="shadow-sm">
      <CardHeader className="pb-2">
        <CardTitle className="text-sm text-muted-foreground">Today</CardTitle>
      </CardHeader>
      <CardContent className="space-y-3 text-sm">
        <div className="flex items-center justify-between"><span>Standup</span><Badge variant="s