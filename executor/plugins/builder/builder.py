"""
Builder plugin.

Scaffolds new plugins with manifest.json, plugin.json, and specialist.py.
"""

import os
import json
import sys
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent


def _ensure_parent_packages_exist(plugin_name: str, base_dir: Path = Path(".")):
    """
    Make sure executor/, executor/plugins/, and plugin folders exist with __init__.py.
    """
    pkg_root = base_dir / "executor"
    plugins_dir = pkg_root / "plugins"
    plugin_dir = plugins_dir / plugin_name

    for d in [pkg_root, plugins_dir, plugin_dir]:
        os.makedirs(d, exist_ok=True)
        init_file = d / "__init__.py"
        if not init_file.exists():
            init_file.write_text("")


def _write_file(path: Path, content: str):
    os.makedirs(path.parent, exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)


def _specialist_fallback(plugin_name: str, description: str) -> str:
    """Return default specialist.py scaffold as a string."""
    return f'''"""
Specialist for {plugin_name} plugin.

Auto-generated by builder.
"""

from typing import Dict, Any


def can_handle(intent: Dict[str, Any]) -> bool:
    return intent.get("plugin") == "{plugin_name}"


def handle(intent: Dict[str, Any]) -> Dict[str, Any]:
    goal = intent.get("goal", "")
    return {{
        "status": "ok",
        "message": f"[{plugin_name}] handled goal: {{goal}}"
    }}


def describe_capabilities() -> list[str]:
    return ["{description}"]
'''


def main(plugin_name: str, description: str):
    """
    Scaffold a new plugin under executor/plugins/{plugin_name}.
    """
    base_dir = Path.cwd()
    _ensure_parent_packages_exist(plugin_name, base_dir=base_dir)

    plugin_dir = base_dir / "executor" / "plugins" / plugin_name

    # Write manifest.json
    manifest = {
        "name": plugin_name,
        "description": description,
        "capabilities": ["scaffolded specialist"],
        "specialist": f"executor.plugins.{plugin_name}.specialist",
    }
    _write_file(plugin_dir / "plugin.json", json.dumps(manifest, indent=2))

    # Write specialist.py (inline scaffold, no Jinja)
    specialist_code = _specialist_fallback(plugin_name, description)
    _write_file(plugin_dir / "specialist.py", specialist_code)

    print(f"âœ… Created new plugin: {plugin_name}")
    print(f"ðŸ“‚ Plugin dir: {plugin_dir}")

    # âœ… Ensure cwd (temp dir during tests) is importable
    cwd = str(base_dir)
    if cwd not in sys.path:
        sys.path.insert(0, cwd)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Scaffold a new Executor plugin.")
    parser.add_argument("plugin_name", help="Name of the plugin")
    parser.add_argument("description", help="Description of the plugin")

    args = parser.parse_args()
    main(args.plugin_name, args.description)