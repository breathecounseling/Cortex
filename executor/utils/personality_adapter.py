"""
executor/utils/personality_adapter.py
-------------------------------------
Phase 2.19 â€” tone styling with optional session awareness
"""

from __future__ import annotations
import random
from typing import Optional
from executor.utils.session_context import get_tone

def _trim(s: str) -> str:
    return " ".join((s or "").strip().split())

def style_response(text: str, tone: Optional[str] = None, session_id: Optional[str] = None) -> str:
    msg = _trim(text or "")
    if not msg: return msg

    # Session-aware fallback
    t = (tone or (get_tone(session_id) if session_id else "neutral") or "neutral").lower()

    if t in ("neutral", ""):
        return msg

    if "playful" in t or "creative" in t or "imaginative" in t:
        spice = ["âœ¨", "ðŸŒˆ", "ðŸŽ¨", "ðŸ¦„", "ðŸ’«"]
        tails = ["What a fun thought!", "Letâ€™s make it magical!", "Love this direction!"]
        return _trim(f"{random.choice(spice)} {msg} {random.choice(spice)} {random.choice(tails)}")

    if "tough" in t or "coach" in t or "motivating" in t:
        tails = ["Letâ€™s crush it.", "Youâ€™ve got this.", "No excuses â€” just action."]
        return _trim(f"{msg} ðŸ’ª {random.choice(tails)}")

    if "calm" in t or "thoughtful" in t or "reflective" in t:
        return _trim(f"{msg} â˜• Take a breath and weâ€™ll move step by step.")

    if "strategic" in t or "focused" in t or "business" in t:
        return _trim(f"{msg} ðŸ“Š Letâ€™s proceed with clarity and purpose.")

    if "friendly" in t or "compassionate" in t or "gentle" in t:
        return _trim(f"{msg} ðŸ’› Iâ€™m with you.")

    if "whimsical" in t or "poetic" in t:
        return _trim(f"ðŸŒ™ {msg.capitalize()} â€” steady as moonlight. ðŸŒ¸")

    return msg